# filename
- ${prefix}-library-operations.${locale}.lu

# template
- ```
@ ml AddToProperty
${allChildren()}

@ ml RemoveFromProperty
${allChildren()}

@ ml ClearProperty 
    - @ PROPERTYName PROPERTYName

@ ml ShowProperty
    - @ PROPERTYName PROPERTYName

# ${triggerIntent}
${substitutions('library-operations.data', json(`{"entity": ${allSynonyms()}, "property": ${propertyNames()}}`), 3)}
```

# propertyNames
- [${join(foreach(properties, property, `"${property}"`), ', ')}]

# allChildren
- ${join(foreach(allEntityTypes(), type, `\t- @ ${type} ${type}`), '\n')}

# allEntityTypes
- ${unique(flatten(foreach(properties, property, entityTypes(property))))}

# entityTypes(property)
- ${foreach(where(schema.properties[property].$entities, entity, entity != 'utterance'), entity, entityType(entity))}

# entityType(entity)
- ${last(split(entity, ':'))}

# allSynonyms
- [${join(foreach(flatten(foreach(enumValues(), enum, phrases(enum))), phrase, `"${phrase}"`), ', ')}]

# enumValues
- ${flatten(select(enumProperties(), prop, if(prop.value.enum, prop.value.enum, if(prop.value.items.enum, prop.value.items.enum, createArray()))))}

# enumProperties
- ${where(indicesAndValues(schema.properties), property, simpleEnum(property))}

# simpleEnum(property)
- ${if(property.value.enum, !startsWith(property.value.enum, '$'), if(property.value.items.enum, !startsWith(property.value.items.enum, '$'), false))}
[generator.lg](../generator.lg)